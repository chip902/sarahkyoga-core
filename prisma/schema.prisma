generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model User {
  email            String          @unique
  emailVerified    DateTime?
  password         String?
  id               String          @id @default(uuid())
  role             String?         @default("user")
  image            String?
  type             String?
  resetToken       String?         @unique
  resetTokenExpiry DateTime?
  firstName        String?
  lastName         String?
  accounts         Account[]
  authenticators   Authenticator[]
  carts            Cart[]
  orders           Order[]
  sessions         Session[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  id           Int      @id @default(autoincrement())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id     Int    @id @default(autoincrement())
  secret String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id             String           @id @default(uuid())
  name           String
  description    String?
  price          Float
  type           ProductType      @default(CLASS)
  duration       Int?
  availableSlots Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?
  imageUrl       String?
  CartItem       CartItem[]
  OrderItem      OrderItem[]
  variants       ProductVariant[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String          @id @default(uuid())
  cartId    String
  productId String
  variantId String?
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
}

model Order {
  id          String           @id @default(uuid())
  userId      String
  total       Float
  status      String           @default("pending")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  orderNumber String           @unique
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  promoCodes  OrderPromoCode[]
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int             @default(1)
  price     Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
}

model Newsletter {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  isDraft     Boolean   @default(true)
  publishedAt DateTime?
  style       Json?
  title       String
  updatedAt   DateTime?
  sentDate    DateTime?
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
}

enum Status {
  DRAFT
  SENT
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  name       String
  price      Float
  quantity   Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItem   CartItem[]
  OrderItem  OrderItem[]
}

model PromoCode {
  id          String           @id @default(uuid())
  code        String           @unique
  type        PromoCodeType
  value       Float
  maxUses     Int?
  usedCount   Int              @default(0)
  expiresAt   DateTime?
  isActive    Boolean          @default(true)
  description String?
  createdBy   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  orders      OrderPromoCode[]
}

model OrderPromoCode {
  id             String    @id @default(uuid())
  orderId        String
  promoCodeId    String
  discountAmount Float
  createdAt      DateTime  @default(now())
  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  promoCode      PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)

  @@unique([orderId, promoCodeId])
}

enum ProductType {
  CLASS
  CLASS_PASS
  WORKSHOP
  OTHER
}

enum PromoCodeType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_CLASS
}
